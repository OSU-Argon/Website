# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  global: GlobalFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Global | Page | Folder

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  name: String
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSections {
  title: String
  content: JSON
}

type GlobalFooter {
  sections: [GlobalFooterSections]
}

type GlobalTheme {
  color: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  name: StringFilter
  color: StringFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSectionsContentSuperscriptFilter {
  value: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksHeroHeadlineImageCaptionSuperscriptFilter {
  value: StringFilter
}

input GlobalFooterSectionsContentImageCaptionFilter {
  Superscript: PageBlocksHeroHeadlineImageCaptionSuperscriptFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input GlobalFooterSectionsContentImageFilter {
  image: ImageFilter
  showCaption: BooleanFilter
  caption: GlobalFooterSectionsContentImageCaptionFilter
  hyperlink: StringFilter
  width: NumberFilter
  height: NumberFilter
  float: StringFilter
}

input GlobalFooterSectionsContentFilter {
  Superscript: GlobalFooterSectionsContentSuperscriptFilter
  Image: GlobalFooterSectionsContentImageFilter
}

input GlobalFooterSectionsFilter {
  title: StringFilter
  content: GlobalFooterSectionsContentFilter
}

input GlobalFooterFilter {
  sections: GlobalFooterSectionsFilter
}

input GlobalThemeFilter {
  color: StringFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
  theme: GlobalThemeFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHeroActions {
  label: String
  icon: Boolean
  link: String
}

type PageBlocksHero {
  image: PageBlocksHeroImage
  headline: JSON
  actions: [PageBlocksHeroActions]
}

type PageBlocksFeaturesItemsIcon {
  name: String
  color: String
  style: String
}

type PageBlocksFeaturesItems {
  icon: PageBlocksFeaturesItemsIcon
  title: String
  text: JSON
  page: String
}

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
  color: String
}

type PageBlocksContent {
  color: String
  body: JSON
}

type PageBlocksTableColumn_headers {
  body: JSON
}

type PageBlocksTableRowsColumns {
  body: JSON
}

type PageBlocksTableRows {
  columns: [PageBlocksTableRowsColumns]
  color: String
}

type PageBlocksTable {
  color: String
  full_width: Boolean
  column_headers: [PageBlocksTableColumn_headers]
  rows: [PageBlocksTableRows]
}

type PageBlocksDownload {
  color: String
  src: String
  label: String
  icon: Boolean
}

union PageBlocks = PageBlocksHero | PageBlocksFeatures | PageBlocksContent | PageBlocksTable | PageBlocksDownload

type Page implements Node & Document {
  title: String!
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBlocksHeroImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksHeroHeadlineSuperscriptFilter {
  value: StringFilter
}

input PageBlocksFeaturesItemsTextImageCaptionSuperscriptFilter {
  value: StringFilter
}

input PageBlocksHeroHeadlineImageCaptionFilter {
  Superscript: PageBlocksFeaturesItemsTextImageCaptionSuperscriptFilter
}

input PageBlocksHeroHeadlineImageFilter {
  image: ImageFilter
  showCaption: BooleanFilter
  caption: PageBlocksHeroHeadlineImageCaptionFilter
  hyperlink: StringFilter
  width: NumberFilter
  height: NumberFilter
  float: StringFilter
}

input PageBlocksHeroHeadlineFilter {
  Superscript: PageBlocksHeroHeadlineSuperscriptFilter
  Image: PageBlocksHeroHeadlineImageFilter
}

input PageBlocksHeroActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  link: StringFilter
}

input PageBlocksHeroFilter {
  image: PageBlocksHeroImageFilter
  headline: PageBlocksHeroHeadlineFilter
  actions: PageBlocksHeroActionsFilter
}

input PageBlocksFeaturesItemsIconFilter {
  name: StringFilter
  color: StringFilter
  style: StringFilter
}

input PageBlocksFeaturesItemsTextSuperscriptFilter {
  value: StringFilter
}

input PageBlocksContentBodyImageCaptionSuperscriptFilter {
  value: StringFilter
}

input PageBlocksFeaturesItemsTextImageCaptionFilter {
  Superscript: PageBlocksContentBodyImageCaptionSuperscriptFilter
}

input PageBlocksFeaturesItemsTextImageFilter {
  image: ImageFilter
  showCaption: BooleanFilter
  caption: PageBlocksFeaturesItemsTextImageCaptionFilter
  hyperlink: StringFilter
  width: NumberFilter
  height: NumberFilter
  float: StringFilter
}

input PageBlocksFeaturesItemsTextFilter {
  Superscript: PageBlocksFeaturesItemsTextSuperscriptFilter
  Image: PageBlocksFeaturesItemsTextImageFilter
}

input PageBlocksFeaturesItemsFilter {
  icon: PageBlocksFeaturesItemsIconFilter
  title: StringFilter
  text: PageBlocksFeaturesItemsTextFilter
  page: StringFilter
}

input PageBlocksFeaturesFilter {
  items: PageBlocksFeaturesItemsFilter
  color: StringFilter
}

input PageBlocksContentBodySuperscriptFilter {
  value: StringFilter
}

input PageBlocksTableColumn_headersBodyImageCaptionSuperscriptFilter {
  value: StringFilter
}

input PageBlocksContentBodyImageCaptionFilter {
  Superscript: PageBlocksTableColumn_headersBodyImageCaptionSuperscriptFilter
}

input PageBlocksContentBodyImageFilter {
  image: ImageFilter
  showCaption: BooleanFilter
  caption: PageBlocksContentBodyImageCaptionFilter
  hyperlink: StringFilter
  width: NumberFilter
  height: NumberFilter
  float: StringFilter
}

input PageBlocksContentBodyFilter {
  Superscript: PageBlocksContentBodySuperscriptFilter
  Image: PageBlocksContentBodyImageFilter
}

input PageBlocksContentFilter {
  color: StringFilter
  body: PageBlocksContentBodyFilter
}

input PageBlocksTableColumn_headersBodySuperscriptFilter {
  value: StringFilter
}

input PageBlocksTableRowsColumnsBodyImageCaptionSuperscriptFilter {
  value: StringFilter
}

input PageBlocksTableColumn_headersBodyImageCaptionFilter {
  Superscript: PageBlocksTableRowsColumnsBodyImageCaptionSuperscriptFilter
}

input PageBlocksTableColumn_headersBodyImageFilter {
  image: ImageFilter
  showCaption: BooleanFilter
  caption: PageBlocksTableColumn_headersBodyImageCaptionFilter
  hyperlink: StringFilter
  width: NumberFilter
  height: NumberFilter
  float: StringFilter
}

input PageBlocksTableColumn_headersBodyFilter {
  Superscript: PageBlocksTableColumn_headersBodySuperscriptFilter
  Image: PageBlocksTableColumn_headersBodyImageFilter
}

input PageBlocksTableColumn_headersFilter {
  body: PageBlocksTableColumn_headersBodyFilter
}

input PageBlocksTableRowsColumnsBodySuperscriptFilter {
  value: StringFilter
}

input PageBlocksTableRowsColumnsBodyImageCaptionFilter {
  Superscript: PageBlocksTableRowsColumnsBodyImageCaptionSuperscriptFilter
}

input PageBlocksTableRowsColumnsBodyImageFilter {
  image: ImageFilter
  showCaption: BooleanFilter
  caption: PageBlocksTableRowsColumnsBodyImageCaptionFilter
  hyperlink: StringFilter
  width: NumberFilter
  height: NumberFilter
  float: StringFilter
}

input PageBlocksTableRowsColumnsBodyFilter {
  Superscript: PageBlocksTableRowsColumnsBodySuperscriptFilter
  Image: PageBlocksTableRowsColumnsBodyImageFilter
}

input PageBlocksTableRowsColumnsFilter {
  body: PageBlocksTableRowsColumnsBodyFilter
}

input PageBlocksTableRowsFilter {
  columns: PageBlocksTableRowsColumnsFilter
  color: StringFilter
}

input PageBlocksTableFilter {
  color: StringFilter
  full_width: BooleanFilter
  column_headers: PageBlocksTableColumn_headersFilter
  rows: PageBlocksTableRowsFilter
}

input PageBlocksDownloadFilter {
  color: StringFilter
  src: StringFilter
  label: StringFilter
  icon: BooleanFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  features: PageBlocksFeaturesFilter
  content: PageBlocksContentFilter
  table: PageBlocksTableFilter
  download: PageBlocksDownloadFilter
}

input PageFilter {
  title: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  global: GlobalMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  global: GlobalMutation
  page: PageMutation
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  name: String
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSectionsMutation {
  title: String
  content: JSON
}

input GlobalFooterMutation {
  sections: [GlobalFooterSectionsMutation]
}

input GlobalThemeMutation {
  color: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroActionsMutation {
  label: String
  icon: Boolean
  link: String
}

input PageBlocksHeroMutation {
  image: PageBlocksHeroImageMutation
  headline: JSON
  actions: [PageBlocksHeroActionsMutation]
}

input PageBlocksFeaturesItemsIconMutation {
  name: String
  color: String
  style: String
}

input PageBlocksFeaturesItemsMutation {
  icon: PageBlocksFeaturesItemsIconMutation
  title: String
  text: JSON
  page: String
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
  color: String
}

input PageBlocksContentMutation {
  color: String
  body: JSON
}

input PageBlocksTableColumn_headersMutation {
  body: JSON
}

input PageBlocksTableRowsColumnsMutation {
  body: JSON
}

input PageBlocksTableRowsMutation {
  columns: [PageBlocksTableRowsColumnsMutation]
  color: String
}

input PageBlocksTableMutation {
  color: String
  full_width: Boolean
  column_headers: [PageBlocksTableColumn_headersMutation]
  rows: [PageBlocksTableRowsMutation]
}

input PageBlocksDownloadMutation {
  color: String
  src: String
  label: String
  icon: Boolean
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  content: PageBlocksContentMutation
  table: PageBlocksTableMutation
  download: PageBlocksDownloadMutation
}

input PageMutation {
  title: String
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
